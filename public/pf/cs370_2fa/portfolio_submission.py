# Comment
#!/usr/bin/python

import sys
import argparse #docs.python.org/3.3/library/argparse.html
import pyotp
import pyqrcode

###########
# Argument: --get-otp
#
# This command should generate an OTP which must match the OTP generated by the Google Authenticator for that 30 second period and print it to the screen. 
#
#
###########
def getOTP():
    #randomString=pyotp.random_base32()
    #print("Random String: ",randomString)

    #open file
    openFile=open("otpString.txt","r")
    randomString=openFile.readline()
    openFile.close()

    totp=pyotp.TOTP(randomString) # pyotp.readthedocs.io/en/latest/
    print("Current OTP:", totp.now())

###########
# Argument: --generate-qr
#
# This command should generate a jpg picture or svg picture of the QR code that encodes the # URI GA expects. URI contains secret keys along with the user id requried for TOTP algoirthm.
#
#
###########    
def generateQR():
    randomString=pyotp.random_base32()
    print("Random String: ",randomString)
    
    openFile=open("otpString.txt","w")
    openFile.write(randomString)
    openFile.close()

    totp=pyotp.TOTP(randomString) # pyotp.readthedocs.io/en/latest/
    #print("Current OTP:", totp.now())

    totpGA=pyotp.totp.TOTP(randomString).provisioning_uri("tjmuber@gmail.com",issuer_name="TJM App")

    print(totpGA)
    
    qrCode=pyqrcode.create(totpGA) #pypi.org/project/PyQRCode/
    qrCode.svg('qr-code.svg',scale=8)
    #qrCode.eps('qr-code.eps',scale=2)
    print(qrCode.terminal(quiet_zone=1))



def main():
    parser = argparse.ArgumentParser(description='handle two factor authentication code.')
    parser.add_argument('--generate-qr', help='generate QR code picture', action="store_true")
    parser.add_argument('--get-otp', help='generate OTP matching Google Authenticator', action="store_true")
    args=parser.parse_args()

    if args.generate_qr:
        generateQR()
    if args.get_otp:
        getOTP()




if __name__ == "__main__":
    main()
